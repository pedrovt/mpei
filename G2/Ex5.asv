%% 5. Considere um array de tamanho 1000 que serve de base à implementação de uma memória
%     associativa (por exemplo em Java) e que se pode assumir que a função de hash devolve um valor 
%     entre 0 e 999 com igual probabilidade.

%% (a) Qual a probabilidade de haver colisões (pelo menos 2 keys mapeadas pela função de hash para a
%      mesma posição do array) em situações em que temos apenas 10 keys?
N = 1e5;     % Number of experiences
k = 10;      % Number of keys available (max number of keys is the number of positions in the array)
hash = 999;  % Max value the hash function can return


experience = ceil(hash * rand(k, N));               % Each column contains 1 experience; each experience contains k lines, each one containing the hash value (0-999)
successes  = 0;                                 

parfor i = 1:  N                                   % For each experience
    if (length (unique(experience(:,i))) < k)      % if not all numbers are different, ie at least one position has the same hash
        successes =  successes + 1;                % it's a success
    end
end

fprintf('Probabiliy of having colisions with 1000 different hash values with k = 10 keys ==')
disp(successes / N)

%% (b) Faça um gráfico da probabilidade de colisões em função do número de keys.
N = 1e5;     % Number of experiences
kMax = 1000; % Max number of keys available (max number of keys is the number of positions in the array)
hash = 999;  % Max value the hash function can return

successes  = zeros(1, numMaxKeys);                                 

for numKeys = 1 : numMaxKeys
    experience = ceil(hash * rand(numKeys, N));             % Each column contains 1 experience; each experience contains k lines, each one containing the hash value (0-999)
    
    for i = 1:  N                                          % For each experience
        if (length (unique(experience(:,i))) < numKeys)         % if not all numbers are different, ie at least one position has the same hash
            successes(numKeys) =  successes + 1;                % it's a success
        end
    end
end

fprintf('Probabiliy of having colisions with 1000 different hash values with k = 10 keys ==')
disp(successes / N)



%% (c) Para um número fixo de keys, por exemplo 50, represente graficamente a variação da probabilidade
%      de não haver qualquer colisão em função do tamanho do array.